{"version":3,"sources":["components/card/card/card.component.jsx","components/card-list/card-list.component.jsx","components/searchbox/searchbox.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","fetch","then","response","json","users","setState","this","filteredmonsters","filter","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6SAEaA,EAAK,SAACC,GAAD,OAEd,sBAAKC,UAAU,iBAAf,UACI,qBAAMC,IAAI,UACTC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACJ,+BAAKL,EAAMI,QAAQE,KAAnB,OACA,4BAAIN,EAAMI,QAAQG,YCDbC,EAAW,SAAAR,GAAK,OACxB,qBAAKC,UAAU,YAAf,SAA4BD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OAChD,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCNjBM,G,MAAU,SAAC,GAAD,EAAEC,YAAF,IAAcC,EAAd,EAAcA,aAAd,OACnB,uBACAZ,UAAU,SACTa,KAAK,SAASF,YAAY,SACvBG,SAAUF,MCkCHG,G,wDAhCb,aACC,IAAD,8BACE,gBACKC,MAAM,CACTR,SAAU,GAEVS,YAAY,IALhB,E,qDAQA,WACC,IAAD,OACEC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GAAK,OAAE,EAAKC,SAAS,CAACf,SAASc,S,oBAEvC,WAAS,IAAD,SACuBE,KAAKR,MAA3BR,EADD,EACCA,SAASS,EADV,EACUA,YACVQ,EAAiBjB,EAASkB,QAAO,SAAAvB,GAAO,OAAEA,EAAQE,KAAKsB,cAAcC,SAASX,EAAYU,kBAClG,OACE,sBAAK3B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CAAWW,YAAY,kBACvBC,aAAc,SAAAiB,GAAC,OAAE,EAAKN,SAAS,CAACN,YAAYY,EAAEC,OAAOC,WAGrD,cAAC,EAAD,CAAUvB,SAAUiB,W,GA1BRO,cCIHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.4150a883.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css';\r\nexport const Card=(props)=>\r\n(\r\n    <div className='card-container'>\r\n        <img  alt='monster'\r\n         src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\r\n        <h2>{props.monster.name} </h2>\r\n        <p>{props.monster.email}</p>\r\n    </div>\r\n)","import React from 'react';\r\n\r\nimport  './card-list.styles.css';\r\n\r\nimport {Card} from '../card/card/card.component'\r\n\r\n\r\nexport const CardList = props=>(\r\n     <div className='card-list'>{props.monsters.map(monster=>\r\n          (<Card key={monster.id} monster={monster}/>)\r\n)}</div>\r\n);","import React from 'react';\r\nimport './searchbox.styles.css';\r\n\r\nexport const SearchBox=({placeholder,handleChange}) => (\r\n    <input\r\n    className='search'\r\n     type='search' placeholder='search'\r\n        onChange={handleChange}\r\n      />\r\n);\r\n","import React, {Component} from 'react';\n\nimport  { CardList } from './components/card-list/card-list.component';\n\nimport {SearchBox} from  './components/searchbox/searchbox.component'; \n\nimport './App.css';\n\nclass App extends Component {\n  constructor()\n  {\n    super();\n    this.state={\n      monsters: [\n      ],\n      searchField:''\n    };\n  }\n  componentDidMount()\n  {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response=>response.json())\n    .then(users=>this.setState({monsters:users}))\n  }\n  render(){\n    const {monsters,searchField}=this.state;\n    const filteredmonsters=monsters.filter(monster=>monster.name.toLowerCase().includes(searchField.toLowerCase()));\n  return(\n    <div className=\"App\">\n      <h1>Monsters Rolodex</h1>\n      <SearchBox placeholder='search monsters' \n      handleChange={e=>this.setState({searchField:e.target.value})}\n      />\n      \n      <CardList monsters={filteredmonsters}></CardList>\n    \n    </div>\n  );\n}\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}